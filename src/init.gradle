import org.gradle.api.services.BuildService
import org.gradle.api.services.BuildServiceParameters
import org.gradle.util.GradleVersion

initscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        classpath "org.apache.groovy:groovy-xml:5.0.1"
        classpath "org.apache.groovy:groovy-json:5.0.1"
    }
}

String detectedMicronautVersion = "unknown"
gradle.settingsEvaluated {
    if (detectedMicronautVersion == "unknown") {
        def micronautBuild = it.extensions.findByName("micronautBuild")
        if (micronautBuild) {
            def version = micronautBuild.micronautVersion
            if (version) {
                println("Micronaut version: ${version}")
                detectedMicronautVersion = version
            }
        }
    }
}


rootProject {
    if (name != 'buildSrc') {
        def settingsPluginVersion = providers.provider {
            def settingsFile = ["settings.gradle", "settings.gradle.kts"]
                    .collect { layout.projectDirectory.file(it).asFile }
                    .find { it.exists() }
            if (settingsFile != null) {
                return findSettingsPluginVersion(settingsFile)
            }
            return "unknown"
        }
        def groupProvider = providers.gradleProperty("projectGroup")
                .orElse(providers.gradleProperty("projectGroupId"))
                .orElse(providers.provider { allprojects.collect { it.group }.findAll().first().toString() })
        def collectingService = gradle.sharedServices.registerIfAbsent("micronautDependenciesService", MicronautDependenciesService) {
            it.parameters.outputDir.set(file(providers.systemProperty("reportDir").get()))
            it.parameters.groupId.set(groupProvider)
            it.parameters.githubSlug.set(providers.gradleProperty("githubSlug"))
            it.parameters.settingsPluginVersion.set(settingsPluginVersion)
            it.parameters.version.set(providers.gradleProperty("projectVersion").orElse("unknown"))
            it.parameters.micronautVersion.set(detectedMicronautVersion)
        }
        def cachedStatus = null
        allprojects {
            pluginManager.withPlugin('maven-publish') {
                tasks.register("extractMicronautDependencies", ExtractMicronautDependencies) { t ->
                    t.service.set(collectingService)
                    t.usesService(collectingService)
                    t.groupId = groupProvider
                    def moduleName = project.name
                    if (!moduleName.startsWith('micronaut-')) {
                        moduleName = "micronaut-$moduleName"
                    }
                    t.status = providers.gradleProperty("projectVersion").zip(groupProvider) { version, group ->
                        if (cachedStatus != null) {
                            return cachedStatus
                        }
                        if (version.endsWith("-SNAPSHOT")) {
                            def versionWithoutSnapshot = version - '-SNAPSHOT'
                            String metadataUrl = "https://repo1.maven.org/maven2/${group.replace('.', '/')}/$moduleName/maven-metadata.xml"
                            println "Metadata URL is $metadataUrl"
                            try {
                                new URL(metadataUrl).withInputStream {
                                    def metadata = new groovy.xml.XmlSlurper().parse(it)
                                    def versions = metadata.versioning.versions.version as List
                                    def matchingVersions = versions.findAll { it.text().startsWith(versionWithoutSnapshot) }
                                    if (!matchingVersions.empty) {
                                        String last = matchingVersions.last()
                                        if (last.contains('-')) {
                                            cachedStatus = last.substring(last.lastIndexOf('-') + 1)
                                        } else {
                                            cachedStatus = "RELEASE"
                                        }
                                    } else {
                                        cachedStatus = "SNAPSHOT"
                                    }
                                }
                            } catch (IOException ex) {
                                cachedStatus = "SNAPSHOT"
                            }
                        } else {
                            cachedStatus = "RELEASE"
                        }
                        cachedStatus
                    }
                    ['apiElements', 'runtimeElements'].each {
                        def conf = configurations.findByName("optimized${it.capitalize()}")
                        if (conf == null) {
                            conf = configurations.findByName(it)
                        }
                        if (conf != null) {
                            t.dependencies.addAll(providers.provider {
                                conf.allDependencies.findAll { it instanceof ExternalModuleDependency }
                                        .collect { (ExternalModuleDependency) it }
                                        .findAll { it.group.startsWith('io.micronaut') }
                                        .collect { "${it.group}".toString() }
                            })
                        }
                    }
                }
            }
        }
    }
}


abstract class ExtractMicronautDependencies extends DefaultTask {
    @Input
    abstract Property<String> getGroupId()

    @Input
    abstract SetProperty<String> getDependencies()

    @Input
    abstract Property<String> getStatus()

    @Input
    abstract Property<MicronautDependenciesService> getService()

    @TaskAction
    void extract() {
        def service = this.service.get()
        service.addDependencies(dependencies.get())
        service.status.set(status.get())
    }
}

abstract class MicronautDependenciesService implements BuildService<Params>, AutoCloseable {
    interface Params extends BuildServiceParameters {
        DirectoryProperty getOutputDir()
        Property<String> getGroupId()
        Property<String> getGithubSlug()
        Property<String> getSettingsPluginVersion()
        Property<String> getVersion()
        Property<String> getMicronautVersion()
    }

    abstract SetProperty<String> getDependencies()


    abstract Property<String> getStatus()

    abstract MapProperty<String, String> getProperties()

    void addDependencies(Set<String> dependencies) {
        this.dependencies.addAll(dependencies)
    }

    void close() {
        def outputFile = new File(parameters.outputDir.asFile.get(), parameters.groupId.get() + ".properties")
        Properties props = new Properties()
        props.put("githubSlug", parameters.githubSlug.get())
        props.put("groupId", parameters.groupId.get())
        props.put("dependencies", dependencies.get().join(","))
        props.put("status", status.get())
        props.put("gradleVersion", GradleVersion.current().version)
        props.put("settingsPluginVersion", parameters.settingsPluginVersion.get())
        props.put("micronautVersion", parameters.micronautVersion.get())
        props.put("version", parameters.version.get())
        properties.getOrElse(Collections.emptyMap()).each { k, v ->
            props.put(k, v)
        }
        try {
            // We're using shields.io to get the build status to avoid spamming GitHub
            def badge = new URL("https://img.shields.io/github/actions/workflow/status/${parameters.githubSlug.get()}/gradle.yml").getText("utf-8")
            def status = (badge =~ "build: ([a-zA-Z]+).*")[0][1]
            props.put("build-status", status)
        } catch (Exception ex) {
            // ignore
        }
        outputFile.withOutputStream { out ->
            props.store(outputFile.newOutputStream(), "Project metadata")
        }
        println("Found ${dependencies.get().size()} Micronaut dependencies. Wrote report at ${outputFile}")
    }
}

def findSettingsPluginVersion(File settingsFile) {
    try {
        def line = settingsFile.readLines()
                .find {
                    it.contains 'io.micronaut.build.shared.settings'
                }
        if (line) {
            return (line =~ /([0-9]+\.[0-9]+\.[0-9]+)/)[0][1]
        }
    } catch (Exception ex) {
        // ignore
    }
    return "unknown"
}
